import telebot;
import random
import os
import sqlite3
import time
from telebot import types

def check_reg_people(userid, chatid): #message.from_user.id and message.chat.id                  #–µ—Å—Ç—å id –∏–ª–∏ –Ω–µ—Ç
    with open(r"base/inf_people.txt", 'r', encoding='utf-8') as file:
        line = file.readline()        # —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        print(line, " ")

        while line != '':
            code = (line.split(":"))[0]            # –ø–æ–∫–∞ –Ω–µ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            if code == str(userid):      # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                return True
                #flag = True
                #break
            line = file.readline()     # —á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return False

def check_reg_group(userid, chatid): #message.from_user.id and message.chat.id                  #–µ—Å—Ç—å id –∏–ª–∏ –Ω–µ—Ç
    with open(r"base/inf_groups.txt", 'r', encoding='utf-8') as file:
        line = file.readline()        # —Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        print(line, " ")

        while line != '':
            code = (line.split(":"))[0]            # –ø–æ–∫–∞ –Ω–µ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            if code == str(chatid):      # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                return True
                #flag = True
                #break
            line = file.readline()     # —á–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return False
            


bot = telebot.TeleBot(token = '7736265547:AAGnxKHv45qdeeWHlMqrWE_VzGPLCnfl0fw')


@bot.message_handler(commands = ['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="–î–ê! –ü–æ–º–æ—â—å –Ω—É–∂–Ω–∞."))
    markup.add(types.KeyboardButton(text="–ù–µ—Ç!"))
    #print(message.chat.id, "–ü—Ä–∏–≤–µ—Ç!", reply_markup = markup)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç
    #groups = bot.chat_ids

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –≤ —Ñ–∞–π–ª
    #with open("chats\base\inf_chats.txt", "w") as file:
        #file.write(str(groups))

    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç!", reply_markup = markup)


@bot.message_handler(commands = ["pup_reg_people"])
def pupi_reg_people(message):
    print((message.text).split())
    if(check_reg_people(message.from_user.id, message.chat.id)):
        bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ')
    elif len((message.text).split())==4:
        print("–£—è—Å–Ω–∏–ª")
        name = (message.text).split() #—è —É—Å—Ç–∞–ª –ø–∏–∑–¥–µ—Ü
        with open("base/inf_people.txt", 'a', encoding='utf-8') as file:
            file.write(f"{message.from_user.id}:{name[1]} {name[2]} {name[3]}\n")
        if not os.path.isdir(rf"base/inf_people/{message.from_user.id}"):
            os.mkdir(rf'base/inf_people/{message.from_user.id}')

        bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {name[1]} {name[2]} {name[3]}\n')
    else:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –§.–ò.–û')


@bot.message_handler(commands = ["pup_reg_group"])
def pupi_reg_group(message):
    number = message.chat.id
    if(check_reg_group(message.from_user.id, message.chat.id)):
        bot.send_message(message.chat.id, '–£–∂–µ –≤ –±–∞–∑–µ')
    else:
        with open(r"base/inf_groups.txt", 'a', encoding='utf-8') as file:
            file.write(f"{message.chat.id}:{message.text[15:]}")
        print(number)

        if not os.path.isdir(rf"base/inf_chats/{number}"):
            os.mkdir(rf'base/inf_chats/{number}')

        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {number}!')


@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    seconds = time.time()
    print(time.ctime(seconds))

    print(f"USER: {message.from_user.id}")
    print(f"CHAT:{message.chat.id}")
    
    if check_reg_people(message.from_user.id, message.chat.id):

        if check_reg_group(message.from_user.id, message.chat.id) or message.from_user.id==message.chat.id:

            
            #if check_reg_group(message.from_user.id, message.chat.id) and message.from_user.id != message.chat.id:
                #with open(rf"base/inf_chats/{message.chat.id}/", 'w+', encoding='utf-8') as file:
                    #file.write(f"{time.ctime(seconds)} {message.from_user.id}:{text.message}")

            bot.send_message(message.from_user.id, 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è')

            if message.text == "–î–ê! –ü–æ–º–æ—â—å –Ω—É–∂–Ω–∞.":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
                btn1 = types.KeyboardButton('–£–ß–ï–ù–ò–ö')
                btn2 = types.KeyboardButton('–£–ß–ò–¢–ï–õ–¨')
                btn3 = types.KeyboardButton('–ë–ò–ë–õ–ò–û–¢–ï–ö–ê')
                markup.add(btn1, btn2, btn3)
                bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π, –ø—É—Ç–Ω–∏–∫!', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            if message.text == "–ë–ò–ë–õ–ò–û–¢–ï–ö–ê":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton(text="8"))
                markup.add(types.KeyboardButton(text="9"))
                markup.add(types.KeyboardButton(text="10"))
                bot.send_message(message.chat.id, '–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –∫–ª–∞—Å—Å–∞?', reply_markup=markup)
            if message.text == "10":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton(text="–ê–ª–≥–µ–±—Ä–∞"))
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç!', reply_markup=markup)
            if message.text == "–ê–ª–≥–µ–±—Ä–∞":
                bot.send_document(message.chat.id, open(r'content/10/algebra/algebra-10-klass.pdf', 'rb'))

            if message.text == "–£–ß–ï–ù–ò–ö":
                bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —à–∫–æ–ª—å–Ω–∏–∫')
        else:
            bot.send_message(message.chat.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ /pup_reg_group')


    else:
        #if message.chat.type == 'private':
        bot.send_message(message.from_user.id, '–ü–æ–≤–µ–¥—É–π –º–Ω–µ –æ —Å–µ–±–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /pup_reg_people')
            #if(message.text[0:10].lower()=="–º–µ–Ω—è –∑–æ–≤—É—Ç"):
                #with open(r"base/inf_people.txt", 'a', encoding='utf-8') as file:
                    #file.write(f"{message.from_user.id}:{(message.text)[11:]}\n")
                #bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,{(message.text)[11:]}!")


        

bot.polling(none_stop=True, interval=0)